/* Generated by Edge Impulse
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
// Generated on: 03.10.2023 17:37:01

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#elif defined __ICCARM__
#define ALIGN(x) __attribute__((aligned(x)))
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#define EI_MAX_SCRATCH_BUFFER_COUNT 8
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 2479968;
#else
constexpr int kTensorArenaSize = 2478944;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};
enum used_operators_e {
  OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_PAD, OP_ADD, OP_SOFTMAX,  OP_LAST
};
struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};
struct NodeInfo_t { // subset of TfLiteNode used for initialization from constant memory
  struct TfLiteIntArray* inputs;
  struct TfLiteIntArray* outputs;
  void* builtin_data;
  used_operators_e used_op_index;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];
TfLiteNode tflNodes[15];

const TfArray<4, int> tensor_dimension0 = { 4, { 1,320,320,3 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0039215688593685627, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(16) int32_t tensor_data1[4*2] = { 
  0, 0, 
  0, 1, 
  0, 1, 
  0, 0, 
};
const TfArray<2, int> tensor_dimension1 = { 2, { 4,2 } };
const ALIGN(8) int32_t tensor_data2[2] = { 26879, -37221, };
const TfArray<1, int> tensor_dimension2 = { 1, { 2 } };
const TfArray<2, float> quant2_scale = { 2, { 0.00018030368664767593, 0.00013142928946763277, } };
const TfArray<2, int> quant2_zero = { 2, { 0,0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const ALIGN(16) int8_t tensor_data3[2*1*1*32] = { 
  /* [0][0][][] */ 52,-44,-51,68,-64,12,-42,43,76,58,-48,-40,-27,49,-36,9,127,-81,96,-81,111,-5,22,-56,-43,-47,-14,68,6,-24,-14,111, 
  /* [1][0][][] */ 57,79,83,-67,-76,80,-8,15,-38,-69,47,120,127,48,38,-3,-57,10,-72,-99,-81,41,80,115,92,79,-52,2,115,-108,-118,-57, 
};
const TfArray<4, int> tensor_dimension3 = { 4, { 2,1,1,32 } };
const TfArray<2, float> quant3_scale = { 2, { 0.0043898550793528557, 0.0031999098137021065, } };
const TfArray<2, int> quant3_zero = { 2, { 0,0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(16) int32_t tensor_data4[32] = { -260, -53, -84, -356, -334, -33, -359, -141, -120, 1303, 43, -72, -61, -60, -325, -362, 358, 504, 87, -345, -212, -91, 248, -140, 91, -231, 89, -221, -177, -278, -302, 933, };
const TfArray<1, int> tensor_dimension4 = { 1, { 32 } };
const TfArray<32, float> quant4_scale = { 32, { 5.4233649279922247e-05, 4.7873010771581903e-05, 5.2465002227108926e-05, 5.2190131100360304e-05, 5.0989354349439964e-05, 5.0296235713176429e-05, 5.2451607189141214e-05, 5.2141065680189058e-05, 6.1801794799976051e-05, 9.4969924248289317e-05, 5.447255534818396e-05, 5.4342672228813171e-05, 5.2790815971093252e-05, 5.101814167574048e-05, 5.4919506510486826e-05, 5.1173821702832356e-05, 5.6304706959053874e-05, 6.4690342696849257e-05, 7.4450632382649928e-05, 5.1796345360344276e-05, 4.6919012675061822e-05, 5.6983186368597671e-05, 7.6502423326019198e-05, 5.1917366363340989e-05, 5.2067905926378444e-05, 5.0072114390786737e-05, 5.3542102250503376e-05, 5.1388688007136807e-05, 5.2725092245964333e-05, 4.813662962988019e-05, 5.0800128519767895e-05, 7.0280402724165469e-05, } };
const TfArray<32, int> quant4_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const ALIGN(16) int8_t tensor_data5[32*1*1*48] = { 
  /* [0][0][][] */ -30,-55,105,10,91,-18,-86,-103,62,-100,-100,-13,54,4,-45,55,-52,-34,-75,-64,-91,-116,-2,104,-123,-1,71,-48,106,-20,-30,-84,86,-59,-99,62,-127,-84,-91,26,83,-84,-105,99,46,-107,93,-32, 
  /* [1][0][][] */ -51,52,-83,-12,-41,93,49,15,96,-108,-112,105,81,-29,23,80,125,-48,29,127,-51,-17,44,32,23,21,-46,127,16,-18,103,-69,74,121,-9,36,32,77,-7,-68,-69,15,-38,-101,-47,48,-58,-67, 
  /* [2][0][][] */ 60,51,-66,85,-19,-61,97,103,-107,96,-31,102,100,-15,80,-111,-61,-29,22,48,-104,-28,117,22,-46,84,108,14,-68,54,71,103,-69,-22,-95,-108,-123,104,117,-23,-119,-73,-1,2,-97,127,-52,-88, 
  /* [3][0][][] */ 69,-6,34,-23,-80,46,-124,38,43,17,59,9,91,93,71,-1,102,97,-56,11,119,-95,-75,-127,-24,-123,-91,104,41,-104,87,3,-66,-44,-24,-23,-87,-29,37,44,-34,-102,-106,-8,75,23,-44,-94, 
  /* [4][0][][] */ 46,95,-4,60,-36,-33,26,12,59,85,-17,60,21,-50,-18,-77,-31,-9,-63,13,109,-98,83,20,-11,-15,60,-70,-58,45,-72,-63,67,118,8,-115,-42,-13,-127,44,-60,-69,-76,-105,39,105,46,58, 
  /* [5][0][][] */ 109,-103,108,93,43,-121,34,50,121,-126,19,-97,28,110,35,48,92,72,-92,97,2,49,20,-24,-127,-68,-14,-93,52,12,10,-105,4,71,-72,23,-120,-37,50,28,-75,-34,40,111,-34,33,28,-36, 
  /* [6][0][][] */ 13,-52,113,76,-92,-71,-7,59,-18,-89,2,-86,84,52,114,-127,39,-6,1,104,-84,-127,107,57,-66,-90,-14,-64,-33,-122,46,-85,-99,-126,-52,-114,-20,35,-118,78,85,52,18,-21,-118,104,-116,-52, 
  /* [7][0][][] */ 122,78,-40,-50,-77,117,-21,-5,127,6,-95,8,61,-87,44,78,56,25,-11,115,58,28,-8,89,-83,112,41,59,-83,98,-27,38,29,24,67,103,-121,84,-11,-27,104,-88,81,76,49,-2,107,-117, 
  /* [8][0][][] */ -3,16,-40,-73,45,18,-75,-27,3,21,31,97,-6,-44,-74,-72,-64,85,-52,18,23,-17,66,92,-89,77,35,59,-67,38,-74,95,77,-32,35,-10,127,-9,-28,54,65,79,-91,-115,-4,-34,5,100, 
  /* [9][0][][] */ -19,-22,112,36,63,-32,-28,-87,-53,15,15,41,-28,-13,-22,-1,50,-34,-16,-18,-38,105,-40,-29,127,19,14,26,0,-11,-8,58,61,36,43,-8,-20,1,-50,-24,66,-42,71,-43,49,12,-11,29, 
  /* [10][0][][] */ -49,98,90,-80,-11,108,115,34,40,39,30,-94,108,83,-36,18,-34,77,-114,-70,-12,19,61,-66,9,55,-113,-106,-43,50,-103,-75,90,99,123,78,-83,14,-25,42,-34,124,-127,-29,-104,-51,-37,-68, 
  /* [11][0][][] */ 122,26,-19,90,121,46,59,35,108,99,-72,89,0,-82,23,-61,-58,-103,48,31,28,64,26,-110,-127,-92,-20,74,83,-32,14,-15,-85,-76,53,48,-90,81,-22,-54,-26,110,-87,13,-52,-54,-113,-99, 
  /* [12][0][][] */ 25,83,-58,-10,93,9,-30,41,-83,70,-8,0,-39,16,45,-76,-101,-33,-61,-90,30,-21,20,102,-88,-47,105,-97,99,-10,-47,125,-85,-69,-46,20,-29,-71,-10,50,122,47,-127,-33,-32,-79,-64,115, 
  /* [13][0][][] */ 125,-53,109,97,102,123,90,70,83,-104,20,-40,103,81,68,-47,-124,-71,-85,26,76,-38,127,-49,-83,47,7,24,-91,-113,81,44,48,111,-21,42,-107,-30,32,79,-63,84,-66,20,-51,35,-14,-34, 
  /* [14][0][][] */ -63,-94,84,66,71,-35,-13,-119,-80,-43,63,77,-25,-98,-98,-85,-55,-59,12,22,-44,20,-9,54,-122,-87,-33,32,-118,-127,-86,42,101,-22,-45,2,85,111,32,-105,-9,-114,12,83,66,-105,60,-88, 
  /* [15][0][][] */ 6,-35,-35,74,90,-100,56,-115,60,-10,-81,30,107,-1,-99,-127,89,13,-105,33,60,17,69,110,91,66,35,92,15,86,73,-114,-4,-2,-76,-12,-41,105,106,-78,12,104,-58,-35,26,-90,-33,-74, 
  /* [16][0][][] */ -85,-13,115,-49,42,116,-59,18,42,33,-93,86,-17,-36,-36,-61,118,83,83,73,102,97,-32,60,-9,54,-60,60,-97,42,58,10,-94,89,58,54,14,41,-64,-68,32,-51,84,82,69,94,127,-3, 
  /* [17][0][][] */ 84,-36,-9,10,-7,-69,-25,-52,18,-43,76,8,110,34,-93,67,4,22,18,63,-56,-16,44,-23,-57,50,-41,49,121,-72,-48,90,-17,-35,57,29,-84,127,-40,-1,-114,30,-40,16,-44,35,-15,-99, 
  /* [18][0][][] */ -98,72,73,-75,-6,-78,-76,-7,3,87,-71,-27,-30,68,47,-44,9,-24,48,6,127,-5,12,-60,36,-69,-14,74,19,32,3,27,26,-36,-69,-81,4,4,-22,44,-7,5,4,-6,-83,7,53,1, 
  /* [19][0][][] */ 17,28,75,35,57,-92,97,93,87,-68,27,-16,-102,30,-62,59,73,-110,109,55,-22,79,-61,10,75,-86,27,-74,-98,-127,-72,45,79,-89,30,-6,21,-75,-61,-108,43,-124,-93,6,-98,27,73,-100, 
  /* [20][0][][] */ -14,83,69,96,-95,102,15,69,-3,12,-106,-8,-9,110,44,-90,-69,-33,-81,-38,28,-52,-87,-86,82,-54,-123,47,27,-2,-51,127,107,40,-25,61,71,-28,-19,-127,-107,-38,-124,-96,-39,-79,-71,118, 
  /* [21][0][][] */ 69,78,91,-107,88,-78,58,12,-18,-127,-67,46,12,25,-52,-81,-72,2,8,-8,84,-62,67,-89,42,-76,-24,72,10,-9,-7,-17,31,78,-102,-100,93,82,-118,-23,8,12,1,-7,-105,-71,-44,111, 
  /* [22][0][][] */ 12,-28,-65,-90,71,-55,73,50,-93,52,-79,-45,87,-43,-86,-64,20,103,-66,-20,57,-52,28,-9,59,57,-65,77,-42,-39,-61,-76,13,5,1,18,23,9,-42,-83,-30,-20,6,99,53,-86,127,2, 
  /* [23][0][][] */ 80,-77,1,46,103,-121,11,-98,53,-73,94,63,25,-113,11,-37,91,-34,-127,93,99,-98,109,-38,-38,-13,85,25,77,27,61,-36,-38,44,19,38,76,1,-100,11,-111,13,-3,-99,-87,-89,94,22, 
  /* [24][0][][] */ -56,-43,-106,-76,-85,-113,-68,-96,73,124,100,47,127,73,-40,-118,-81,59,22,-55,104,-85,-54,-33,51,-30,81,67,118,57,4,-60,-6,5,53,38,-51,-72,67,-17,-69,-124,101,10,19,-32,26,80, 
  /* [25][0][][] */ -80,-65,-89,-18,97,-85,-109,62,45,-126,-45,14,77,-7,-127,-22,-81,69,30,-125,66,81,-18,-69,6,-50,-116,44,79,-110,35,124,103,-116,42,80,85,-55,-27,-21,-98,105,-113,5,100,48,65,28, 
  /* [26][0][][] */ 49,-122,-22,-6,-99,-2,-14,-20,-117,-127,104,99,-84,-51,20,-17,114,19,-76,-56,5,87,104,17,70,61,16,46,12,26,-78,-3,-33,-63,-95,-105,-50,82,-60,109,-103,98,65,26,-68,71,-22,101, 
  /* [27][0][][] */ 12,5,-66,-109,-127,-77,-79,-24,47,99,38,-114,-34,55,84,-38,69,-19,59,-93,-104,14,-27,-28,-114,44,-119,-9,64,36,-38,-15,66,73,-101,-97,-62,-69,-125,88,-102,27,22,17,101,19,66,104, 
  /* [28][0][][] */ 87,-6,83,39,-118,-74,-103,-78,-40,-111,52,64,-88,-93,-5,98,89,110,-80,69,-36,17,-116,-85,-127,81,-96,-69,-80,-81,-10,-23,-109,13,75,67,17,-111,-43,26,100,43,-101,52,-111,-17,13,40, 
  /* [29][0][][] */ 60,56,55,-65,-99,12,-127,8,108,21,-102,-122,119,-111,-59,-51,-119,106,34,-66,-112,-41,56,2,-36,5,-53,-34,-114,-25,105,-5,47,-16,-90,-63,-14,116,-5,104,50,118,-42,93,-2,117,-63,-52, 
  /* [30][0][][] */ 33,-71,-37,41,-113,22,-68,-12,120,11,34,-47,-111,11,59,11,28,33,106,-112,45,-113,-127,11,-123,18,-77,122,-18,-122,-100,3,-82,-74,-125,-62,10,-25,1,24,98,-58,9,99,108,-48,103,63, 
  /* [31][0][][] */ 38,-85,47,88,53,69,-54,-114,-45,-25,-44,-51,71,-42,-9,90,-30,-58,58,57,45,69,-5,104,68,-34,46,35,-49,-21,64,84,23,29,-50,-3,127,-35,-94,-85,66,-66,22,40,13,-45,19,27, 
};
const TfArray<4, int> tensor_dimension5 = { 4, { 32,1,1,48 } };
const TfArray<32, float> quant5_scale = { 32, { 0.0023049300070852041, 0.0020346029195934534, 0.0022297624964267015, 0.0022180804517120123, 0.0021670474670827389, 0.0021375899668782949, 0.0022291932255029678, 0.0022159952204674482, 0.0026265762280672789, 0.0040362216532230377, 0.0023150835186243057, 0.0023095635697245598, 0.0022436096332967281, 0.00216827099211514, 0.0023340790066868067, 0.002174887340515852, 0.002392950002104044, 0.0027493394445627928, 0.0031641516834497452, 0.0022013445850461721, 0.0019940580241382122, 0.0024217853788286448, 0.003251353045925498, 0.0022064880467951298, 0.0022128860000520945, 0.0021280648652464151, 0.0022755393292754889, 0.0021840191911906004, 0.0022408163640648127, 0.0020458067301660776, 0.0021590054966509342, 0.0029869170393794775, } };
const TfArray<32, int> quant5_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(16) int32_t tensor_data6[48] = { 376, 498, 1616, 319, 6312, 11724, 1865, -50, -563, -405, 680, 678, 2028, 840, 21785, 2314, 1398, -936, -5, 2257, -1144, 9233, 5874, 7232, 5128, 240, 4343, 4743, 4983, -434, 8629, 4439, 317, -29, 4687, 3714, -914, 192, -423, 4387, 926, -313, -431, 31, 843, 3402, 374, 864, };
const TfArray<1, int> tensor_dimension6 = { 1, { 48 } };
const TfArray<48, float> quant6_scale = { 48, { 0.00057451112661510706, 0.0011931993067264557, 0.00035390612902119756, 0.00036537862615659833, 0.00034710910404101014, 0.00034715080983005464, 0.00059590250020846725, 0.00021355313947424293, 0.00056205299915745854, 0.0010869622929021716, 0.0014726363588124514, 0.00038157054223120213, 0.00061809009639546275, 0.00090640451526269317, 0.00016478952602483332, 0.00054794782772660255, 0.00036111715598963201, 0.00042314280290156603, 0.00030461573624052107, 0.00039569599903188646, 0.00054289610125124454, 0.00028434960404410958, 0.00062573584727942944, 0.000216899104998447, 0.00032666933839209378, 0.00040927875670604408, 0.0015850123018026352, 0.00038926344132050872, 0.00034826676710508764, 0.00055881444131955504, 0.00030213833088055253, 0.000271975266514346, 0.0012302873656153679, 0.00042992926319129765, 0.00079353677574545145, 0.00049046968342736363, 0.0013566843699663877, 0.00053231831407174468, 0.00036373641341924667, 0.00041705451440066099, 0.00020408318960107863, 0.00042422497062943876, 0.00053930643480271101, 0.00048069318290799856, 0.002393422182649374, 0.00040457479190081358, 0.00060389039572328329, 0.0014942486304789782, } };
const TfArray<48, int> quant6_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(16) int8_t tensor_data7[48*1*1*8] = { 
  /* [0][0][][] */ -127,-4,2,61,-30,29,33,-21, 
  /* [1][0][][] */ 9,32,67,4,57,-52,116,127, 
  /* [2][0][][] */ -27,10,2,-16,-127,6,-4,-5, 
  /* [3][0][][] */ 89,-9,-22,-127,-99,12,40,-13, 
  /* [4][0][][] */ -127,27,13,1,51,-23,56,21, 
  /* [5][0][][] */ -80,6,37,-31,-127,34,1,98, 
  /* [6][0][][] */ -25,-127,41,-12,16,-9,8,39, 
  /* [7][0][][] */ -97,-29,32,127,124,-59,-21,14, 
  /* [8][0][][] */ 76,-6,-22,-127,-11,-41,-36,-26, 
  /* [9][0][][] */ -31,-127,20,26,20,66,-25,117, 
  /* [10][0][][] */ -83,4,-3,33,-127,73,49,-24, 
  /* [11][0][][] */ 126,3,48,40,-68,-64,-28,-127, 
  /* [12][0][][] */ -12,4,47,-5,19,-62,127,48, 
  /* [13][0][][] */ 85,-12,-24,-31,87,127,104,-84, 
  /* [14][0][][] */ 119,47,29,33,-127,-39,-5,-15, 
  /* [15][0][][] */ -5,-127,0,-20,0,20,-7,35, 
  /* [16][0][][] */ -41,-5,8,-13,-127,10,1,-3, 
  /* [17][0][][] */ -23,104,-115,5,22,-127,104,-81, 
  /* [18][0][][] */ 127,-30,-52,5,-60,52,10,113, 
  /* [19][0][][] */ 127,-64,-33,-1,29,-2,54,19, 
  /* [20][0][][] */ 127,47,-42,108,14,41,5,-60, 
  /* [21][0][][] */ 7,34,-31,-3,-28,108,-127,-66, 
  /* [22][0][][] */ -127,-4,11,24,-22,-24,-21,-6, 
  /* [23][0][][] */ -26,-42,-5,17,-127,69,53,-25, 
  /* [24][0][][] */ 127,26,16,-49,-58,39,-38,-11, 
  /* [25][0][][] */ 31,-3,17,-21,127,55,37,-40, 
  /* [26][0][][] */ 11,-117,15,-59,-17,-127,81,-56, 
  /* [27][0][][] */ -14,-127,39,-10,-5,-56,30,-13, 
  /* [28][0][][] */ -127,11,11,15,-22,-45,122,25, 
  /* [29][0][][] */ -14,44,21,5,-14,38,-101,-127, 
  /* [30][0][][] */ 127,-63,34,36,-120,-27,-13,-1, 
  /* [31][0][][] */ -14,-29,127,12,18,-83,121,52, 
  /* [32][0][][] */ -54,31,-17,-16,-127,-30,-99,32, 
  /* [33][0][][] */ -25,14,-9,24,-127,-51,-39,20, 
  /* [34][0][][] */ 12,-127,77,-8,-19,122,-121,58, 
  /* [35][0][][] */ -28,-57,-127,-5,-2,-74,52,-56, 
  /* [36][0][][] */ -10,127,40,0,5,23,-11,12, 
  /* [37][0][][] */ -127,16,32,-13,37,-22,8,-75, 
  /* [38][0][][] */ -127,-25,-13,-7,40,11,52,82, 
  /* [39][0][][] */ 10,-28,60,-10,0,-99,127,96, 
  /* [40][0][][] */ -16,-6,0,-48,-127,105,81,-33, 
  /* [41][0][][] */ -127,33,14,-70,-66,-78,-75,50, 
  /* [42][0][][] */ -36,-127,-96,13,-17,79,-122,-63, 
  /* [43][0][][] */ -46,21,-15,-127,65,65,47,-11, 
  /* [44][0][][] */ 127,0,15,-78,9,-1,-14,44, 
  /* [45][0][][] */ -9,-127,-20,-5,-17,-56,54,28, 
  /* [46][0][][] */ 121,-2,-15,-37,127,-19,-30,9, 
  /* [47][0][][] */ 127,10,30,113,18,53,-26,-52, 
};
const TfArray<4, int> tensor_dimension7 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant7_scale = { 48, { 0.00084424274973571301, 0.0017534034559503198, 0.00052006420446559787, 0.00053692300571128726, 0.00051007600268349051, 0.0005101372953504324, 0.00087567727314308286, 0.00031381583539769053, 0.0008259355672635138, 0.0015972885303199291, 0.0021640355698764324, 0.00056071701692417264, 0.00090828194515779614, 0.0013319592690095305, 0.00024215781013481319, 0.00080520805204287171, 0.00053066079271957278, 0.00062180735403671861, 0.00044763207552023232, 0.00058147433446720243, 0.00079778453800827265, 0.00041785105713643134, 0.00091951730428263545, 0.0003187327238265425, 0.00048003980191424489, 0.00060143414884805679, 0.0023291718680411577, 0.00057202170137315989, 0.00051177717978134751, 0.00082117650890722871, 0.00044399153557606041, 0.00039966701297089458, 0.0018079043366014957, 0.00063178001437336206, 0.0011661003809422255, 0.00072074402123689651, 0.0019936445169150829, 0.00078224053140729666, 0.00053450977429747581, 0.00061286060372367501, 0.00029989975155331194, 0.00062339758733287454, 0.00079250952694565058, 0.00070637749740853906, 0.0035171282943338156, 0.00059452169807627797, 0.00088741548825055361, 0.0021957948338240385, } };
const TfArray<48, int> quant7_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(16) int32_t tensor_data8[8] = { -23356, 23086, -8635, -20373, 16660, -5425, 24353, 60279, };
const TfArray<1, int> tensor_dimension8 = { 1, { 8 } };
const TfArray<8, float> quant8_scale = { 8, { 0.00054819777142256498, 0.00064406194724142551, 0.0014780063647776842, 0.0014876383356750011, 0.00065002177143469453, 0.00032392991124652326, 0.00097058532992377877, 0.0008598503191024065, } };
const TfArray<8, int> quant8_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const ALIGN(16) int8_t tensor_data9[8*1*1*48] = { 
  /* [0][0][][] */ -51,-49,-62,-31,-1,-48,-7,13,-85,108,-24,70,78,49,110,-2,23,-50,68,77,25,-10,-9,-67,41,-101,51,73,-30,70,-1,-20,6,-100,127,26,-14,-8,-15,-38,91,23,75,0,-73,-37,8,-48, 
  /* [1][0][][] */ -3,40,127,-17,-30,-63,0,-70,34,8,27,1,-40,13,25,-127,12,-61,15,29,-22,30,16,-40,-15,-28,43,-4,10,16,37,-18,6,-12,26,24,-18,-28,97,-56,-4,52,-2,36,-11,-32,31,-25, 
  /* [2][0][][] */ 2,-66,9,-47,34,37,-2,-35,2,5,-8,6,-4,58,1,2,-54,119,-37,-55,-26,25,-33,-8,127,10,-10,2,-18,-15,-18,-50,-14,-24,-10,12,-24,-11,-31,16,22,-20,-36,-2,9,27,-33,-37, 
  /* [3][0][][] */ -1,-67,17,21,3,-4,-8,-6,-12,-8,20,8,36,-22,30,-2,-8,-9,-24,-16,2,16,-25,17,0,60,-12,24,-11,-19,127,-13,2,9,0,12,-11,-1,-1,31,11,-9,-20,26,-10,29,-6,31, 
  /* [4][0][][] */ -120,28,15,20,7,-20,-8,24,66,-44,25,-22,-34,-36,-24,-4,-3,32,-25,5,12,-21,3,1,-14,54,-11,108,22,-14,19,-18,-8,-127,-7,-13,3,0,17,4,-43,-22,-20,24,-44,44,-6,33, 
  /* [5][0][][] */ -39,7,23,-13,-86,5,7,54,30,46,14,10,-40,-68,10,47,6,-127,73,23,46,-74,2,57,1,14,-88,-60,-91,-26,28,13,2,-101,28,-56,86,20,-93,1,6,-19,14,22,115,-55,-26,-28, 
  /* [6][0][][] */ -25,0,-4,17,31,-13,7,-23,-18,-12,18,-10,10,17,-8,-61,-15,7,-31,-49,-44,33,-16,-32,-5,-11,-67,-66,25,12,-20,-14,-5,-60,-20,42,-39,-39,28,-32,13,-19,10,24,127,10,19,15, 
  /* [7][0][][] */ 12,30,-93,18,-31,25,-7,60,-10,-20,62,-63,13,-31,-5,-4,-24,-127,15,-17,66,47,22,-56,22,-12,11,0,-14,22,-39,1,-16,43,-17,-51,-12,-88,-38,-58,-7,-37,32,73,1,-30,-22,7, 
};
const TfArray<4, int> tensor_dimension9 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant9_scale = { 8, { 0.023298405110836029, 0.027372632175683975, 0.062815271317958832, 0.063224628567695618, 0.027625923976302147, 0.013767020776867867, 0.041249874979257584, 0.03654363751411438, } };
const TfArray<8, int> quant9_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const ALIGN(16) int32_t tensor_data10[48] = { -50463, 1217, 7158, 4579, 7367, -2435, 928, 28941, 120, 19233, -2205, 24034, -7754, -1164, 35221, 16028, 500, 20177, 50168, 8434, 514, 3251, 1548, 18694, -8377, 22855, 54321, 34695, 4780, 4215, -847, 457, 822, 15323, -6491, 13584, -12896, 13002, -20825, 153875, 34636, 38341, 11716, -3198, 11855, 1987, 1291, 2995, };
const TfArray<1, int> tensor_dimension10 = { 1, { 48 } };
const TfArray<48, float> quant10_scale = { 48, { 0.00051187147619202733, 0.00038887863047420979, 0.0002203600452048704, 0.00055211473954841495, 0.00015915140102151781, 0.00016783132741693407, 0.00066317262826487422, 0.0001165944995591417, 0.00017326732631772757, 0.00026536703808233142, 0.00010106502304552123, 0.00018198441830463707, 0.00028275468503125012, 0.00019537386833690107, 6.9707028160337359e-05, 9.3407303211279213e-05, 0.00022194915800355375, 0.0002267712407046929, 5.4575521062361076e-05, 0.00028326129540801048, 0.00030664436053484678, 0.00017358182230964303, 0.00019865331705659628, 0.00011203956819372252, 0.00015810196055099368, 0.00018631084822118282, 0.00048244307981804013, 9.7393225587438792e-05, 0.00020388615666888654, 0.00022059652837924659, 7.9870478657539934e-05, 0.00023233309912029654, 0.00066963763674721122, 0.00018856648239307106, 0.00020502843835856766, 0.00016759124991949648, 0.00032233959063887596, 0.00017933436902239919, 0.00032094275229610503, 1.7288220988120884e-05, 9.1961344878654927e-05, 4.6466753701679409e-05, 0.00015722311218269169, 0.00012677555787377059, 0.00028162339003756642, 0.00021423619182314724, 0.00034158106427639723, 0.00014421196829061955, } };
const TfArray<48, int> quant10_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const ALIGN(16) int8_t tensor_data11[1*3*3*48] = { 
  /* [0][0][][] */ 4,-8,22,102,5,84,2,27,16,5,17,11,-6,-8,-52,6,1,7,-22,-110,-7,-31,127,-8,-5,5,-10,4,-8,2,12,95,20,24,38,-25,3,35,7,2,18,-68,-5,-7,9,2,-8,-7, 127,4,15,-127,23,80,14,10,123,127,5,45,-48,-23,6,6,127,-58,-72,-53,-101,20,-108,16,19,59,-33,-84,19,18,10,-123,7,-58,127,9,-38,-48,1,115,-80,-100,-36,7,-41,-7,-127,17, -36,-6,8,13,3,68,7,17,29,8,-16,31,-12,-2,19,3,-102,29,2,83,-31,-18,-17,-5,-6,-60,-8,27,-22,2,5,-21,8,-22,24,-18,0,46,36,-8,50,28,-22,15,-44,5,-5,-7, 
  /* [0][1][][] */ 126,4,0,-100,12,-27,38,-16,7,6,-5,55,-6,0,16,-32,-1,-50,-60,-85,10,-80,-124,-16,4,92,-23,-127,-12,29,13,-107,19,-52,1,127,-1,59,-34,38,-63,-127,37,-83,-47,-11,-13,-4, 25,-127,-127,111,-127,-127,-127,-127,-127,-96,127,-127,127,127,37,-127,-85,127,127,-98,127,127,114,127,127,-127,-127,29,-127,-127,97,127,-127,127,-24,-42,127,-127,127,125,127,-89,127,127,127,-113,99,100, 52,3,49,-17,5,-57,48,18,-25,11,-107,-9,2,-39,127,2,61,-67,-75,91,13,-53,10,-31,1,1,-44,68,14,36,3,6,34,-44,8,68,-4,63,57,-8,-83,-5,-84,-25,23,-11,-11,1, 
  /* [0][2][][] */ -55,-6,26,-21,6,32,-35,21,6,-30,18,35,9,-6,-49,14,-1,19,-36,103,3,-40,-19,-11,-3,13,-4,51,-13,4,52,-30,-15,-43,-32,-36,2,31,8,-17,9,-28,45,-33,-46,26,-10,13, 69,124,74,16,12,-27,127,33,17,-7,45,25,-3,0,-101,21,-62,-57,-49,119,-37,48,11,21,34,-65,-47,35,73,-2,127,26,87,-22,8,-33,-23,-15,-16,127,-28,-32,-38,47,17,-23,8,-127, -44,-1,8,-9,1,-10,-58,7,-21,-14,-49,-44,22,-9,-13,8,31,21,-31,-127,20,-15,2,-8,-7,2,-13,-54,-18,9,14,12,-18,87,-41,-19,-3,38,16,-57,4,-9,-51,13,-55,127,-5,-12, 
};
const TfArray<4, int> tensor_dimension11 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant11_scale = { 48, { 0.021754536777734756, 0.016527341678738594, 0.0093653015792369843, 0.023464877158403397, 0.0067639346234500408, 0.0071328310295939445, 0.028184836730360985, 0.0049552661366760731, 0.0073638614267110825, 0.011278099380433559, 0.0042952634394168854, 0.007734337355941534, 0.012017074041068554, 0.0083033889532089233, 0.0029625487513840199, 0.0039698104374110699, 0.0094328392297029495, 0.0096377776935696602, 0.0023194595705717802, 0.012038605287671089, 0.013032385148108006, 0.0073772273026406765, 0.0084427660331130028, 0.0047616814263164997, 0.0067193331196904182, 0.0079182107001543045, 0.020503830164670944, 0.0041392119601368904, 0.008665161207318306, 0.0093753524124622345, 0.0033944952301681042, 0.0098741566762328148, 0.028459599241614342, 0.0080140754580497742, 0.008713708259165287, 0.0071226279251277447, 0.013699432834982872, 0.007621710654348135, 0.013640066608786583, 0.00073474936652928591, 0.0039083571173250675, 0.0019748369231820107, 0.0066819819621741772, 0.0053879609331488609, 0.011968993581831455, 0.0091050378978252411, 0.014517194591462612, 0.0061290082521736622, } };
const TfArray<48, int> quant11_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 3 };
const ALIGN(16) int32_t tensor_data12[48] = { 70267, 9505, 8488, 5832, 1945, 7108, -2124, -305, 933, 2051, 3525, 799, 3632, -776, 1097, -1779, 6004, 14118, -261, 24888, 4017, 1224, 6253, -619, 3947, 4211, 18975, 7266, 116, -2199, 42, 2072, -2540, 9152, 2912, 7586, 10094, 5872, 16680, 1533, -774, 2260, 1222, 2864, 5090, 2164, -1925, 4319, };
const TfArray<1, int> tensor_dimension12 = { 1, { 48 } };
const TfArray<48, float> quant12_scale = { 48, { 6.1873652157373726e-05, 0.00024854292860254645, 0.00017662681057117879, 0.00055726099526509643, 0.0012314945925027132, 0.00075505673885345459, 0.0008682244224473834, 0.0011305171065032482, 0.00064914830727502704, 0.00072307692607864738, 0.00066308950772508979, 0.0004311746743042022, 0.00029470885056070983, 0.00066387379774823785, 0.0007963386015035212, 0.0020323919598013163, 0.00025215669302269816, 0.00030786459683440626, 0.0012650015996769071, 0.00010795295384014025, 0.00028321982244960964, 0.00061729410663247108, 0.00063523557037115097, 0.00077665032586082816, 0.00031926619703881443, 0.00028442512848414481, 0.00021800356626044959, 0.00051213189726695418, 0.00070411810884252191, 0.0010867940727621317, 0.00058351171901449561, 0.00040476355934515595, 0.00073603587225079536, 0.00023875424813013524, 0.00036392570473253727, 0.00025644339621067047, 0.00036979024298489094, 0.00023146359308157116, 0.00013474853767547756, 0.0029712456744164228, 0.00092820270219817758, 0.001272289315238595, 0.00045739448978565633, 0.00058738916413858533, 0.00022560408979188651, 0.00063349370611831546, 0.00057056243531405926, 0.00067215773742645979, } };
const TfArray<48, int> quant12_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const ALIGN(16) int8_t tensor_data13[48*1*1*8] = { 
  /* [0][0][][] */ 88,59,-48,46,127,24,-66,-46, 
  /* [1][0][][] */ 37,-3,16,127,12,-33,-27,13, 
  /* [2][0][][] */ 12,-96,-32,70,12,-109,127,2, 
  /* [3][0][][] */ 127,-17,3,0,11,-10,4,-3, 
  /* [4][0][][] */ -7,-19,127,-4,-2,-28,4,-95, 
  /* [5][0][][] */ 97,-37,32,21,127,19,-5,-2, 
  /* [6][0][][] */ -35,95,-12,81,55,84,-127,-16, 
  /* [7][0][][] */ -2,127,-3,7,-10,3,-7,-13, 
  /* [8][0][][] */ 127,49,15,12,-18,-25,8,-26, 
  /* [9][0][][] */ -127,9,-14,30,8,8,24,12, 
  /* [10][0][][] */ -5,-12,-10,127,-12,50,-49,-39, 
  /* [11][0][][] */ -59,-1,23,-127,0,31,-43,-79, 
  /* [12][0][][] */ 127,44,58,23,-124,1,24,-58, 
  /* [13][0][][] */ 9,77,-127,12,-22,86,-61,71, 
  /* [14][0][][] */ -118,5,16,127,-32,-17,43,42, 
  /* [15][0][][] */ -19,127,4,-19,20,-19,7,-45, 
  /* [16][0][][] */ -11,-127,-29,-32,-26,-67,77,17, 
  /* [17][0][][] */ 127,93,-18,-52,4,62,-102,-16, 
  /* [18][0][][] */ -73,14,-81,12,14,-9,26,127, 
  /* [19][0][][] */ -51,-14,-13,7,-127,-56,66,19, 
  /* [20][0][][] */ -127,-44,-25,-17,28,-13,101,-28, 
  /* [21][0][][] */ -38,-10,-16,-22,-127,30,-25,-3, 
  /* [22][0][][] */ -127,-16,-18,0,12,59,66,-2, 
  /* [23][0][][] */ -30,7,8,-26,-3,85,-126,-127, 
  /* [24][0][][] */ -6,53,-127,26,12,42,-29,59, 
  /* [25][0][][] */ 30,-24,-7,127,-42,32,-9,-38, 
  /* [26][0][][] */ 4,-11,3,11,-20,127,109,-32, 
  /* [27][0][][] */ 47,7,-20,-24,127,43,24,-23, 
  /* [28][0][][] */ -41,127,-28,26,20,47,-9,55, 
  /* [29][0][][] */ -60,1,-30,17,32,62,-127,-72, 
  /* [30][0][][] */ -9,-17,8,-127,-2,-13,-1,-3, 
  /* [31][0][][] */ -30,9,19,45,-127,31,1,-16, 
  /* [32][0][][] */ -24,12,66,-89,36,127,-92,-113, 
  /* [33][0][][] */ -44,-32,-45,-30,-127,20,63,9, 
  /* [34][0][][] */ -127,64,-8,69,42,-11,12,12, 
  /* [35][0][][] */ -46,127,-46,-15,37,-89,57,-50, 
  /* [36][0][][] */ -48,83,43,-45,42,127,-96,-49, 
  /* [37][0][][] */ 74,-127,-49,15,16,-127,74,-41, 
  /* [38][0][][] */ -55,-61,10,-12,59,-16,-3,127, 
  /* [39][0][][] */ 2,-127,-5,9,-15,-18,-43,-85, 
  /* [40][0][][] */ 100,-8,-40,11,-19,42,-127,-45, 
  /* [41][0][][] */ 28,-127,45,24,-5,86,-63,108, 
  /* [42][0][][] */ -35,12,48,-127,10,-7,-14,-19, 
  /* [43][0][][] */ -66,-18,5,-127,10,-17,-26,-19, 
  /* [44][0][][] */ 55,-16,-25,57,-67,127,4,-47, 
  /* [45][0][][] */ -127,-13,16,-8,-27,46,32,-3, 
  /* [46][0][][] */ 36,97,127,4,-34,32,-14,0, 
  /* [47][0][][] */ 125,127,42,-6,43,-19,-21,1, 
};
const TfArray<4, int> tensor_dimension13 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant13_scale = { 48, { 0.00013924934319220483, 0.00055935664568096399, 0.00039750631549395621, 0.001254140050150454, 0.0027715321630239487, 0.0016992880264297128, 0.0019539766944944859, 0.0025442778132855892, 0.0014609363861382008, 0.0016273159999400377, 0.0014923117123544216, 0.00097037735395133495, 0.00066325505031272769, 0.0014940768014639616, 0.0017921945545822382, 0.0045739863999187946, 0.0005674895946867764, 0.00069286260986700654, 0.0028469408862292767, 0.00024295281036756933, 0.00063739850884303451, 0.0013892471324652433, 0.0014296252047643065, 0.0017478852532804012, 0.0007185224094428122, 0.00064011110225692391, 0.00049062649486586452, 0.0011525751324370503, 0.0015846483875066042, 0.0024458772968500853, 0.0013132184976711869, 0.00091093796072527766, 0.0016564807156100869, 0.00053732679225504398, 0.00081903062527999282, 0.0005771369906142354, 0.0008322289795614779, 0.00052091886755079031, 0.00030325743136927485, 0.0066869175061583519, 0.0020889604929834604, 0.0028633424080908298, 0.0010293861851096153, 0.0013219448737800121, 0.00050773180555552244, 0.0014257051516324282, 0.0012840755516663194, 0.0015127201331779361, } };
const TfArray<48, int> quant13_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const ALIGN(16) int32_t tensor_data14[8] = { -6558, -32752, 20806, 11151, 15563, 354, 36970, 8537, };
const TfArray<1, int> tensor_dimension14 = { 1, { 8 } };
const TfArray<8, float> quant14_scale = { 8, { 0.00060863012913614511, 0.00081589032197371125, 0.00083230435848236084, 0.0008601265144534409, 0.00088833592599257827, 0.0010092565789818764, 0.00079666182864457369, 0.00061722646933048964, } };
const TfArray<8, int> quant14_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const ALIGN(16) int8_t tensor_data15[8*1*1*48] = { 
  /* [0][0][][] */ -7,15,29,-127,17,22,17,19,-11,24,7,-18,124,0,-8,15,0,-3,-11,-14,97,0,-11,29,31,64,13,25,-2,-5,4,-127,1,3,-1,-7,-30,-9,-11,19,0,-32,-17,5,-4,6,-8,0, 
  /* [1][0][][] */ -28,-2,25,-6,54,33,-47,78,16,25,-17,-34,17,0,7,32,0,52,21,-42,10,26,127,34,-36,-3,61,28,17,-13,16,-5,43,-2,-8,-2,15,-45,19,9,-24,-8,-107,11,-40,10,-43,-94, 
  /* [2][0][][] */ -47,0,19,1,35,-23,18,41,-7,50,15,-16,0,0,-4,42,0,25,-127,18,-4,15,-16,24,-33,27,32,33,-13,23,11,-11,22,-3,-23,-34,-5,-18,21,9,37,-32,-56,11,8,-37,17,8, 
  /* [3][0][][] */ 15,21,17,-19,-38,-14,-14,-19,64,22,-10,-12,32,0,-22,19,0,6,5,-3,26,-1,-7,-4,-3,19,-12,-11,-11,15,-16,-36,-57,67,-85,0,33,-2,15,-127,3,-14,-6,-84,-1,26,-2,0, 
  /* [4][0][][] */ -10,-10,68,42,10,-32,3,-7,-2,-16,-4,-3,-94,0,-10,14,0,1,10,12,64,1,4,-16,-27,23,-5,31,-22,2,-1,105,5,-3,7,3,11,-23,-32,-28,-3,-127,7,-27,1,-8,7,2, 
  /* [5][0][][] */ -18,74,15,-15,-14,56,26,18,-42,36,11,63,26,0,-127,-20,0,25,-51,15,-5,16,-16,52,-29,-13,37,17,-18,22,37,-34,46,40,-68,-9,15,16,-63,39,24,-23,-31,57,20,82,19,22, 
  /* [6][0][][] */ -25,-66,-19,6,24,-44,-15,9,40,-45,-20,95,3,0,-127,44,0,-12,45,-16,-1,0,38,-44,49,-3,1,-33,29,-1,-8,-12,90,-44,26,14,-12,-10,-91,-21,5,-28,7,-34,-13,-74,-19,-26, 
  /* [7][0][][] */ -112,-1,-18,15,127,11,80,35,21,-6,11,-14,-22,0,77,114,0,9,15,48,-13,-5,-18,15,27,6,44,-22,51,72,59,0,-12,-22,-17,-9,-5,26,20,4,70,-1,-1,-37,67,-17,59,78, 
};
const TfArray<4, int> tensor_dimension15 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant15_scale = { 8, { 0.025866780430078506, 0.034675337374210358, 0.035372935235500336, 0.036555375903844833, 0.037754274904727936, 0.042893406003713608, 0.033858127892017365, 0.026232125237584114, } };
const TfArray<8, int> quant15_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const ALIGN(16) int32_t tensor_data16[48] = { 76095, 58415, 65448, 44350, -307, 14708, 1578, 41841, 32293, 30669, 26023, 3400, -54574, -127, 90069, 2727, -204, 54695, 3261, -1485, -17137, -6228, 59519, 55453, -20818, 45016, 67714, 29268, -898, 14648, -5484, -50541, 13650, 163285, 33240, 1488, 86637, 233, 169640, -15827, 15746, -24256, 1499, 146163, -7610, 123825, -1188, -24300, };
const TfArray<1, int> tensor_dimension16 = { 1, { 48 } };
const TfArray<48, float> quant16_scale = { 48, { 7.8118355304468423e-05, 7.0980146119836718e-05, 0.00012465316103771329, 5.9107118431711569e-05, 0.00020483184198383242, 0.00019400306337047368, 0.00024968030629679561, 4.1509101720293984e-05, 7.5349373219069093e-05, 3.3329968573525548e-05, 3.3000425901263952e-05, 2.4053360903053544e-05, 0.00022181485837791115, 0.005541567225009203, 2.8363467208691873e-05, 0.00033547505154274404, 0.0027484172023832798, 1.1148743396915961e-05, 7.4524446972645819e-05, 0.00022952075232751667, 7.1395625127479434e-05, 7.0240355853457004e-05, 0.00010104208922712132, 3.0719729693373665e-05, 8.2931182987522334e-05, 6.6337066527921706e-05, 1.8368129531154409e-05, 3.0051862268010154e-05, 0.00019164626428391784, 5.4404095862992108e-05, 4.5509506890084594e-05, 0.00018178182654082775, 0.00019011627591680735, 6.8580911829485558e-06, 7.1163776738103479e-05, 0.00029868204728700221, 1.0367332833993714e-05, 0.00051114236703142524, 2.7988477086182684e-05, 4.733093737741001e-05, 6.3733081333339214e-05, 0.00011191965313628316, 0.00014265971549320966, 8.7421494754380547e-06, 0.00027965451590716839, 4.8676938604330644e-05, 0.00019657127268146724, 6.5521344367880374e-05, } };
const TfArray<48, int> quant16_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const ALIGN(16) int8_t tensor_data17[1*3*3*48] = { 
  /* [0][0][][] */ -40,-25,-5,-23,8,-37,-83,-72,-16,-58,10,72,39,-71,117,-45,-113,-84,45,-5,4,-71,-111,-92,-39,-124,-65,-31,57,16,88,28,-127,-106,-1,57,14,42,-123,89,-76,-12,102,-127,1,-42,-82,103, 76,4,-25,-31,59,-127,-127,-82,52,-89,-118,114,46,-82,2,67,-52,-109,67,6,14,-112,-127,-75,-4,-122,-120,-61,-66,24,-51,53,24,-127,59,87,10,63,-102,127,-127,7,118,-109,7,-25,-126,91, -32,35,8,-13,-64,-117,-61,-22,91,-19,-127,40,9,-71,-100,-9,-127,-26,35,16,-8,-76,-40,-31,-14,-45,-61,-32,-6,20,-26,13,96,-104,82,44,9,33,-17,21,-78,4,26,-85,-13,2,-53,15, 
  /* [0][1][][] */ -83,-127,-49,-46,-10,57,100,-102,-19,-115,-19,107,90,-64,28,-98,-121,-97,92,-75,48,-88,-110,-127,50,-127,-80,-50,123,-58,127,83,-41,-104,-5,80,-41,-75,-127,101,40,63,108,-123,-86,-118,82,117, 127,-85,-127,-127,127,41,97,-127,93,-127,-117,127,127,-14,-4,127,-60,-127,127,-127,127,-127,-124,-122,127,-95,-127,-127,-127,-127,-66,127,28,-114,127,127,-66,-127,-118,95,59,127,127,-108,-108,-127,127,127, -54,29,-67,-90,-119,-27,33,-43,127,-28,-81,32,52,-70,-23,-45,-37,-30,54,-69,55,-81,-45,-34,47,-21,-54,-73,21,-88,-37,26,28,-110,127,28,-37,-59,-14,-13,35,55,28,-84,-54,-42,69,38, 
  /* [0][2][][] */ -59,-113,-43,-43,0,40,-2,-39,-29,-70,-18,57,86,-127,-127,-69,-43,-26,68,77,60,-34,-16,-70,37,-84,-13,-66,74,31,75,58,100,-42,-26,3,-95,34,-34,41,8,40,27,-80,95,-81,6,32, 88,-75,-99,-92,84,22,11,-52,55,-76,-33,53,93,-26,18,88,-24,-39,79,120,87,-54,-22,-68,90,-97,-20,-104,-53,43,-41,110,-15,-56,79,11,-127,49,-32,4,9,33,30,-80,127,-107,-9,43, -30,29,-49,-42,-80,-18,27,-17,63,-9,-11,23,39,-43,114,-33,-93,-11,31,62,79,-30,-5,-12,41,-28,-6,-68,-15,31,-23,42,-84,-54,78,5,-22,23,16,-37,3,36,7,-25,64,-39,-2,20, 
};
const TfArray<4, int> tensor_dimension17 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant17_scale = { 48, { 0.0033200301695615053, 0.003016656031832099, 0.0052977590821683407, 0.0025120524223893881, 0.0087053533643484116, 0.0082451300695538521, 0.010611413046717644, 0.0017641368322074413, 0.0032023482490330935, 0.0014165235916152596, 0.0014025180134922266, 0.0010222678538411856, 0.0094271311536431313, 0.23551659286022186, 0.0012054473627358675, 0.014257689006626606, 0.1168077290058136, 0.00047382159391418099, 0.0031672888435423374, 0.0097546316683292389, 0.0030343141406774521, 0.0029852150473743677, 0.0042942888103425503, 0.0013055885210633278, 0.0035245751496404409, 0.0028193253092467785, 0.00078064552508294582, 0.0012772041372954845, 0.0081449663266539574, 0.002312174066901207, 0.0019341540755704045, 0.0077257272787392139, 0.0080799413844943047, 0.00029146886663511395, 0.0030244605150073767, 0.012693987227976322, 0.00044061164953745902, 0.02172354981303215, 0.001189510221593082, 0.0020115647930651903, 0.0027086557820439339, 0.0047565852291882038, 0.0060630380176007748, 0.00037154133315198123, 0.011885317042469978, 0.0020687698852270842, 0.0083542792126536369, 0.002784657059237361, } };
const TfArray<48, int> quant17_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 3 };
const ALIGN(16) int32_t tensor_data18[48] = { 2998, 57, 6058, 3230, 5299, 4844, 8944, -26, -76, -259, 1759, 181, 13697, -56987936, 3710, 13920, -46003620, -93, -475, 5261, 2924, -20, 577, 244, 2196, -280, 48, 618, 1648, 1406, 1414, 6906, 2380, 214, 73, -1861, 395, 1606, -112, 5500, 1778, 8725, -356, -74, 7711, 181, 6782, 6126, };
const TfArray<1, int> tensor_dimension18 = { 1, { 48 } };
const TfArray<48, float> quant18_scale = { 48, { 0.00068020145408809185, 0.00075661222217604518, 0.00051375356270000339, 0.00051196885760873556, 0.00039165749331004918, 0.00044154017814435065, 0.00042618977022357285, 0.0014922460541129112, 0.00058027490740641952, 0.0035433035809546709, 0.00081829197006300092, 0.0036133867688477039, 0.00017158679838757962, 2.8459294920679667e-09, 0.00072197051486000419, 0.00024021646822802722, 2.8459294920679667e-09, 0.0082038277760148048, 0.00060762441717088223, 0.00076130789238959551, 0.00039117218693718314, 0.0055409772321581841, 0.00026292019174434245, 0.002407782943919301, 0.0016878606984391809, 0.0015567491063848138, 0.0028776628896594048, 0.0018729293951764703, 0.00055625097593292594, 0.0019196403445675969, 0.0021122102625668049, 0.00033490182249806821, 0.00033233698923140764, 0.014470886439085007, 0.00075206614565104246, 0.00060201960150152445, 0.0039994195103645325, 0.00070085696643218398, 0.0042649810202419758, 0.00065477302996441722, 0.0014892985345795751, 0.00025011837715283036, 0.00067010731436312199, 0.013144831173121929, 0.00063990929629653692, 0.0009538381127640605, 0.00041101025999523699, 0.00016123471141327173, } };
const TfArray<48, int> quant18_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const ALIGN(16) int8_t tensor_data19[48*1*1*8] = { 
  /* [0][0][][] */ 21,-127,43,-26,28,-31,-49,28, 
  /* [1][0][][] */ 81,127,-15,-84,-33,18,-67,100, 
  /* [2][0][][] */ 31,16,-41,127,58,108,41,84, 
  /* [3][0][][] */ 112,112,-90,127,-118,-24,-25,5, 
  /* [4][0][][] */ -31,-36,67,26,-61,37,-12,-127, 
  /* [5][0][][] */ 8,14,-34,83,-11,-12,72,127, 
  /* [6][0][][] */ 30,-99,-82,-88,90,127,111,44, 
  /* [7][0][][] */ 127,23,13,-22,30,-8,80,-70, 
  /* [8][0][][] */ 51,-68,24,127,-15,-19,3,-121, 
  /* [9][0][][] */ 83,-76,-9,47,-66,-9,-127,112, 
  /* [10][0][][] */ -122,-34,-127,12,-6,9,-62,45, 
  /* [11][0][][] */ -19,-28,-12,-86,-127,-49,41,-8, 
  /* [12][0][][] */ -13,6,-72,96,-63,-25,54,127, 
  /* [13][0][][] */ 0,0,0,0,0,0,0,0, 
  /* [14][0][][] */ 8,-39,13,34,74,127,42,87, 
  /* [15][0][][] */ 19,31,1,-127,13,53,-25,66, 
  /* [16][0][][] */ 0,0,0,0,0,0,0,0, 
  /* [17][0][][] */ 26,12,127,27,-31,-19,42,46, 
  /* [18][0][][] */ 100,-127,38,64,-7,10,-96,0, 
  /* [19][0][][] */ -127,-52,47,32,19,-22,-30,45, 
  /* [20][0][][] */ 8,7,-70,105,-61,-127,-6,53, 
  /* [21][0][][] */ 59,14,127,1,-9,-12,71,12, 
  /* [22][0][][] */ -93,-19,-127,21,18,0,-98,-18, 
  /* [23][0][][] */ -75,127,-17,-33,-45,-28,122,-57, 
  /* [24][0][][] */ 2,-65,-52,79,-4,-65,103,127, 
  /* [25][0][][] */ 37,56,34,18,127,39,-61,-61, 
  /* [26][0][][] */ -80,-41,-127,3,47,0,-72,-34, 
  /* [27][0][][] */ -27,18,-70,11,-127,100,39,82, 
  /* [28][0][][] */ -2,-16,-37,-1,-18,127,77,58, 
  /* [29][0][][] */ 102,24,127,3,-26,-21,95,13, 
  /* [30][0][][] */ -51,127,-26,3,-18,-36,101,-39, 
  /* [31][0][][] */ -46,-100,-9,-9,43,-69,127,108, 
  /* [32][0][][] */ -7,-37,-9,127,19,18,53,62, 
  /* [33][0][][] */ -7,57,-9,-80,-13,-18,-5,127, 
  /* [34][0][][] */ -23,28,9,-114,72,-36,5,127, 
  /* [35][0][][] */ 127,17,-27,-99,36,20,70,-107, 
  /* [36][0][][] */ -92,-9,7,4,-47,6,-125,127, 
  /* [37][0][][] */ 1,-22,-1,-6,-11,127,46,29, 
  /* [38][0][][] */ 25,10,0,69,127,-13,-14,27, 
  /* [39][0][][] */ 0,52,35,-83,2,20,-18,127, 
  /* [40][0][][] */ 84,0,127,-16,-14,20,100,0, 
  /* [41][0][][] */ 5,-20,-35,103,42,127,101,102, 
  /* [42][0][][] */ -79,5,127,3,-49,-8,-38,38, 
  /* [43][0][][] */ -16,-50,-15,127,-49,11,9,-74, 
  /* [44][0][][] */ 13,-12,-58,-58,127,-7,-30,-81, 
  /* [45][0][][] */ -77,127,11,2,-38,-22,60,-64, 
  /* [46][0][][] */ -127,-38,60,19,-42,66,-52,43, 
  /* [47][0][][] */ 95,13,127,42,33,-52,121,-51, 
};
const TfArray<4, int> tensor_dimension19 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant19_scale = { 48, { 0.0009409785270690918, 0.0010466838721185923, 0.0007107175188139081, 0.00070824858266860247, 0.00054181198356673121, 0.0006108187953941524, 0.00058958330191671848, 0.0020643465686589479, 0.00080274196807295084, 0.0049017430283129215, 0.0011320104822516441, 0.0049986946396529675, 0.00023737011360935867, 3.937008052901092e-09, 0.00099876115564256907, 0.00033231117413379252, 3.937008052901092e-09, 0.011349028907716274, 0.00084057677304372191, 0.0010531797306612134, 0.00054114061640575528, 0.0076652891002595425, 0.00036371909664012492, 0.0033308840356767178, 0.0023349563125520945, 0.0021535789128392935, 0.0039809076115489006, 0.0025909771211445332, 0.00076950766379013658, 0.0026555962394922972, 0.0029219940770417452, 0.00046329721226356924, 0.00045974907698109746, 0.020018765702843666, 0.0010403948836028576, 0.00083282316336408257, 0.0055327257141470909, 0.00096955301705747843, 0.0059000984765589237, 0.0009058013092726469, 0.0020602690055966377, 0.00034600929939188063, 0.00092701450921595097, 0.018184324726462364, 0.00088523910380899906, 0.0013195226201787591, 0.00056858424795791507, 0.00022304922458715737, } };
const TfArray<48, int> quant19_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const ALIGN(16) int32_t tensor_data20[8] = { -3063, -37414, -10632, -3069, -36794, -4709, -31113, -29208, };
const TfArray<1, int> tensor_dimension20 = { 1, { 8 } };
const TfArray<8, float> quant20_scale = { 8, { 0.0019082867074757814, 0.0018651391146704555, 0.0023060457315295935, 0.0014212991809472442, 0.0011293159332126379, 0.0019072999712079763, 0.001853090594522655, 0.0014534498332068324, } };
const TfArray<8, int> quant20_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const ALIGN(16) int8_t tensor_data21[8*1*1*16] = { 
  /* [0][0][][] */ 0,-23,-12,1,127,3,3,3,-2,-115,-82,-1,0,107,-6,0, 
  /* [1][0][][] */ 0,-26,-33,88,89,-3,19,10,-1,1,127,-53,0,28,-29,0, 
  /* [2][0][][] */ 0,-8,14,-8,-42,9,4,-9,2,6,-14,5,0,127,-8,0, 
  /* [3][0][][] */ 0,-4,-37,-127,86,16,65,5,-3,47,2,36,0,-7,13,0, 
  /* [4][0][][] */ 0,43,-30,33,-80,76,127,8,4,-74,16,5,0,0,22,0, 
  /* [5][0][][] */ 0,-20,-15,-2,-18,-19,-10,17,-1,14,-1,-48,0,3,127,0, 
  /* [6][0][][] */ 0,11,31,-1,34,-2,-31,-14,1,-103,111,63,0,127,64,0, 
  /* [7][0][][] */ 0,22,2,127,-12,1,25,1,-3,64,-50,93,0,-15,59,0, 
};
const TfArray<4, int> tensor_dimension21 = { 4, { 8,1,1,16 } };
const TfArray<8, float> quant21_scale = { 8, { 0.081102184951305389, 0.079268410801887512, 0.098006941378116608, 0.060405213385820389, 0.047995924949645996, 0.081060245633125305, 0.078756347298622131, 0.061771616339683533, } };
const TfArray<8, int> quant21_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const ALIGN(16) int32_t tensor_data22[16] = { -161, 15539, 42990, 6209, 3835, 121550, 8772, 46715, -11423, 2034, 26677, 18112, -445, 24298, 7962, -107, };
const TfArray<1, int> tensor_dimension22 = { 1, { 16 } };
const TfArray<16, float> quant22_scale = { 16, { 0.0018688903655856848, 0.00017556517559569329, 9.0288071078248322e-05, 0.0005576502881012857, 0.00031377919367514551, 2.7399508326197974e-05, 0.0006049203802831471, 8.1695965491235256e-05, 1.9082939616055228e-05, 0.00053438363829627633, 0.00024753122124820948, 0.0012533774133771658, 0.00072724185883998871, 0.00030770082958042622, 0.00025275160442106426, 0.003907486330717802, } };
const TfArray<16, int> quant22_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const ALIGN(16) int8_t tensor_data23[1*3*3*16] = { 
  /* [0][0][][] */ -108,18,-87,-126,39,-68,79,-76,-90,-3,-6,28,-127,5,54,-73, 51,25,-127,127,127,-127,127,-127,-85,127,-127,51,-105,6,127,-25, 24,-24,75,-1,-72,60,-95,78,-94,-27,5,-16,61,1,-101,-29, 
  /* [0][1][][] */ -127,127,-28,13,-43,11,-29,14,-28,1,4,-110,-49,9,-29,-14, -78,-42,-57,-14,-7,-30,8,-28,-109,-89,20,-12,-104,-127,1,23, 14,1,53,3,3,28,-26,33,-127,6,-1,1,-21,12,-4,43, 
  /* [0][2][][] */ -115,-73,56,2,-6,34,-40,52,-77,0,0,5,40,2,-26,23, 23,-4,24,-1,-27,34,-35,21,-126,-13,1,85,-58,0,-28,-111, 21,-8,11,1,4,9,9,22,-115,4,0,-127,107,3,17,-127, 
};
const TfArray<4, int> tensor_dimension23 = { 4, { 1,3,3,16 } };
const TfArray<16, float> quant23_scale = { 16, { 0.079427838325500488, 0.0074615199118852615, 0.0038372429553419352, 0.023700136691331863, 0.013335615396499634, 0.0011644790647551417, 0.025709114968776703, 0.0034720783587545156, 0.00081102491822093725, 0.02271130308508873, 0.010520077310502529, 0.053268536925315857, 0.030907778069376945, 0.013077285140752792, 0.010741943493485451, 0.16606816649436951, } };
const TfArray<16, int> quant23_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&quant23_zero, 3 };
const ALIGN(16) int32_t tensor_data24[16] = { -1073741824, 32614, -505, 5656, 101583, 1304, 30111, 3002, -264941, 3494, 15713, 814601, -1073741824, 24730, 15988, -1073741824, };
const TfArray<1, int> tensor_dimension24 = { 1, { 16 } };
const TfArray<16, float> quant24_scale = { 16, { 1.3102037232926023e-09, 0.0002000131644308567, 0.00070929731009528041, 4.3776824895758182e-05, 2.0425206457730383e-05, 0.00048308898112736642, 0.00012380348925944418, 0.00093067379202693701, 6.8772565100516658e-06, 9.4539384008385241e-05, 0.00022332587104756385, 7.4273216341680381e-06, 1.1533876076441629e-09, 0.00011874103074660525, 0.00010086425027111545, 1.243374708748135e-10, } };
const TfArray<16, int> quant24_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&quant24_zero, 0 };
const ALIGN(16) int8_t tensor_data25[16*3*3*3] = { 
  /* [0][0][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [0][1][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [0][2][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [1][0][][] */ 53,-8,24, 15,-16,16, -109,-127,-62, 
  /* [1][1][][] */ 7,-15,-10, -3,-2,-10, 11,-45,-1, 
  /* [1][2][][] */ -16,-8,-18, -8,-10,-16, 30,-35,-2, 
  /* [2][0][][] */ 9,1,-42, 32,114,-32, 0,-34,-25, 
  /* [2][1][][] */ -14,17,-30, 32,127,-49, -11,4,-28, 
  /* [2][2][][] */ 7,-64,-8, 28,-42,-41, -1,-48,-6, 
  /* [3][0][][] */ -34,96,-13, -31,86,-12, -9,26,37, 
  /* [3][1][][] */ -33,127,-5, -15,108,13, -55,-33,79, 
  /* [3][2][][] */ -36,113,72, -71,29,40, -25,25,86, 
  /* [4][0][][] */ 11,16,21, -9,22,26, 10,36,46, 
  /* [4][1][][] */ 0,-2,54, -8,23,46, 36,71,20, 
  /* [4][2][][] */ 14,68,53, 7,127,34, 15,61,51, 
  /* [5][0][][] */ 53,36,-51, 41,31,-49, 40,69,-5, 
  /* [5][1][][] */ 43,-40,-107, 44,-41,-127, 47,33,-59, 
  /* [5][2][][] */ 39,26,-54, 38,-2,-67, 31,23,-66, 
  /* [6][0][][] */ 28,-57,25, 42,-80,29, 22,-9,2, 
  /* [6][1][][] */ 32,-93,54, 45,-127,62, 9,-25,17, 
  /* [6][2][][] */ 24,-36,17, 9,-48,32, -6,4,6, 
  /* [7][0][][] */ 36,70,12, -43,-29,-9, 33,36,-11, 
  /* [7][1][][] */ 58,0,-20, -39,-127,-39, 26,-21,-24, 
  /* [7][2][][] */ 4,36,-42, -2,1,-38, -22,19,-38, 
  /* [8][0][][] */ 97,116,127, 95,113,124, 78,97,112, 
  /* [8][1][][] */ 95,113,124, 92,109,121, 53,93,108, 
  /* [8][2][][] */ 70,106,118, 64,103,115, 43,68,100, 
  /* [9][0][][] */ -6,52,6, 12,49,-20, -2,30,0, 
  /* [9][1][][] */ 65,127,-53, 27,109,-41, -37,11,18, 
  /* [9][2][][] */ -40,-32,40, -19,-37,20, 3,6,-2, 
  /* [10][0][][] */ -25,-84,-18, 34,94,19, -9,-13,-3, 
  /* [10][1][][] */ -60,-105,-14, 78,127,14, -17,-27,-1, 
  /* [10][2][][] */ -32,-21,3, 36,23,-11, -9,-1,7, 
  /* [11][0][][] */ -32,-31,-25, -2,-43,-26, -16,-120,-97, 
  /* [11][1][][] */ -46,-34,-37, -21,-47,-58, -28,-65,-93, 
  /* [11][2][][] */ -9,-41,-75, 118,127,71, -54,-3,-53, 
  /* [12][0][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [12][1][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [12][2][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [13][0][][] */ -51,-96,-14, -61,-109,-21, -8,-15,-2, 
  /* [13][1][][] */ 60,114,18, 57,127,28, 8,18,14, 
  /* [13][2][][] */ -6,-14,9, 4,-13,4, 3,9,2, 
  /* [14][0][][] */ 48,-3,-32, 78,-22,-41, 33,-8,-18, 
  /* [14][1][][] */ 94,-8,-62, 127,-32,-75, 59,-17,-33, 
  /* [14][2][][] */ 59,-7,-42, 73,-21,-49, 20,-14,-24, 
  /* [15][0][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [15][1][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [15][2][][] */ 0,0,0, 0,0,0, 0,0,0, 
};
const TfArray<4, int> tensor_dimension25 = { 4, { 16,3,3,3 } };
const TfArray<16, float> quant25_scale = { 16, { 3.3410194077987398e-07, 0.051003355532884598, 0.18087080121040344, 0.011163089424371719, 0.0052084275521337986, 0.12318768352270126, 0.031569886952638626, 0.23732180893421173, 0.0017537003150209785, 0.024107541888952255, 0.056948095560073853, 0.0018939669243991375, 2.9411381774480105e-07, 0.03027896024286747, 0.025720382109284401, 3.1706054670621597e-08, } };
const TfArray<16, int> quant25_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&quant25_zero, 0 };
const TfArray<4, int> tensor_dimension26 = { 4, { 1,160,160,16 } };
const TfArray<1, float> quant26_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant26_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&quant26_zero, 0 };
const TfArray<4, int> tensor_dimension27 = { 4, { 1,160,160,16 } };
const TfArray<1, float> quant27_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant27_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&quant27_zero, 0 };
const TfArray<4, int> tensor_dimension28 = { 4, { 1,160,160,8 } };
const TfArray<1, float> quant28_scale = { 1, { 0.72286605834960938, } };
const TfArray<1, int> quant28_zero = { 1, { -3 } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&quant28_zero, 0 };
const TfArray<4, int> tensor_dimension29 = { 4, { 1,160,160,48 } };
const TfArray<1, float> quant29_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant29_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&quant29_zero, 0 };
const TfArray<4, int> tensor_dimension30 = { 4, { 1,161,161,48 } };
const TfArray<1, float> quant30_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant30_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&quant30_zero, 0 };
const TfArray<4, int> tensor_dimension31 = { 4, { 1,80,80,48 } };
const TfArray<1, float> quant31_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant31_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant31 = { (TfLiteFloatArray*)&quant31_scale, (TfLiteIntArray*)&quant31_zero, 0 };
const TfArray<4, int> tensor_dimension32 = { 4, { 1,80,80,8 } };
const TfArray<1, float> quant32_scale = { 1, { 0.44433712959289551, } };
const TfArray<1, int> quant32_zero = { 1, { 16 } };
const TfLiteAffineQuantization quant32 = { (TfLiteFloatArray*)&quant32_scale, (TfLiteIntArray*)&quant32_zero, 0 };
const TfArray<4, int> tensor_dimension33 = { 4, { 1,80,80,48 } };
const TfArray<1, float> quant33_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant33_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant33 = { (TfLiteFloatArray*)&quant33_scale, (TfLiteIntArray*)&quant33_zero, 0 };
const TfArray<4, int> tensor_dimension34 = { 4, { 1,80,80,48 } };
const TfArray<1, float> quant34_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant34_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant34 = { (TfLiteFloatArray*)&quant34_scale, (TfLiteIntArray*)&quant34_zero, 0 };
const TfArray<4, int> tensor_dimension35 = { 4, { 1,80,80,8 } };
const TfArray<1, float> quant35_scale = { 1, { 0.53759193420410156, } };
const TfArray<1, int> quant35_zero = { 1, { -1 } };
const TfLiteAffineQuantization quant35 = { (TfLiteFloatArray*)&quant35_scale, (TfLiteIntArray*)&quant35_zero, 0 };
const TfArray<4, int> tensor_dimension36 = { 4, { 1,80,80,8 } };
const TfArray<1, float> quant36_scale = { 1, { 0.68050467967987061, } };
const TfArray<1, int> quant36_zero = { 1, { 9 } };
const TfLiteAffineQuantization quant36 = { (TfLiteFloatArray*)&quant36_scale, (TfLiteIntArray*)&quant36_zero, 0 };
const TfArray<4, int> tensor_dimension37 = { 4, { 1,80,80,48 } };
const TfArray<1, float> quant37_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant37_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant37 = { (TfLiteFloatArray*)&quant37_scale, (TfLiteIntArray*)&quant37_zero, 0 };
const TfArray<4, int> tensor_dimension38 = { 4, { 1,80,80,32 } };
const TfArray<1, float> quant38_scale = { 1, { 0.041072811931371689, } };
const TfArray<1, int> quant38_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant38 = { (TfLiteFloatArray*)&quant38_scale, (TfLiteIntArray*)&quant38_zero, 0 };
const TfArray<4, int> tensor_dimension39 = { 4, { 1,80,80,2 } };
const TfArray<1, float> quant39_scale = { 1, { 0.089305698871612549, } };
const TfArray<1, int> quant39_zero = { 1, { -40 } };
const TfLiteAffineQuantization quant39 = { (TfLiteFloatArray*)&quant39_scale, (TfLiteIntArray*)&quant39_zero, 0 };
const TfArray<4, int> tensor_dimension40 = { 4, { 1,80,80,2 } };
const TfArray<1, float> quant40_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant40_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant40 = { (TfLiteFloatArray*)&quant40_scale, (TfLiteIntArray*)&quant40_zero, 0 };
const TfLiteConvParams opdata0 = { kTfLitePaddingSame, 2,2, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs0 = { 3, { 0,25,24 } };
const TfArray<1, int> outputs0 = { 1, { 26 } };
const TfLiteDepthwiseConvParams opdata1 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 26,23,22 } };
const TfArray<1, int> outputs1 = { 1, { 27 } };
const TfLiteConvParams opdata2 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs2 = { 3, { 27,21,20 } };
const TfArray<1, int> outputs2 = { 1, { 28 } };
const TfLiteConvParams opdata3 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs3 = { 3, { 28,19,18 } };
const TfArray<1, int> outputs3 = { 1, { 29 } };
const TfArray<2, int> inputs4 = { 2, { 29,1 } };
const TfArray<1, int> outputs4 = { 1, { 30 } };
const TfLiteDepthwiseConvParams opdata5 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 30,17,16 } };
const TfArray<1, int> outputs5 = { 1, { 31 } };
const TfLiteConvParams opdata6 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs6 = { 3, { 31,15,14 } };
const TfArray<1, int> outputs6 = { 1, { 32 } };
const TfLiteConvParams opdata7 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs7 = { 3, { 32,13,12 } };
const TfArray<1, int> outputs7 = { 1, { 33 } };
const TfLiteDepthwiseConvParams opdata8 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs8 = { 3, { 33,11,10 } };
const TfArray<1, int> outputs8 = { 1, { 34 } };
const TfLiteConvParams opdata9 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs9 = { 3, { 34,9,8 } };
const TfArray<1, int> outputs9 = { 1, { 35 } };
const TfLiteAddParams opdata10 = { kTfLiteActNone };
const TfArray<2, int> inputs10 = { 2, { 32,35 } };
const TfArray<1, int> outputs10 = { 1, { 36 } };
const TfLiteConvParams opdata11 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs11 = { 3, { 36,7,6 } };
const TfArray<1, int> outputs11 = { 1, { 37 } };
const TfLiteConvParams opdata12 = { kTfLitePaddingValid, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs12 = { 3, { 37,5,4 } };
const TfArray<1, int> outputs12 = { 1, { 38 } };
const TfLiteConvParams opdata13 = { kTfLitePaddingValid, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs13 = { 3, { 38,3,2 } };
const TfArray<1, int> outputs13 = { 1, { 39 } };
const TfLiteSoftmaxParams opdata14 = { 1 };
const TfArray<1, int> inputs14 = { 1, { 39 } };
const TfArray<1, int> outputs14 = { 1, { 40 } };
const TensorInfo_t tensorData[] = {
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension0, 307200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data1, (TfLiteIntArray*)&tensor_dimension1, 32, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data2, (TfLiteIntArray*)&tensor_dimension2, 8, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant2))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data3, (TfLiteIntArray*)&tensor_dimension3, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant3))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data4, (TfLiteIntArray*)&tensor_dimension4, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant4))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data5, (TfLiteIntArray*)&tensor_dimension5, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant5))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data6, (TfLiteIntArray*)&tensor_dimension6, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant6))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data7, (TfLiteIntArray*)&tensor_dimension7, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant7))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data8, (TfLiteIntArray*)&tensor_dimension8, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant8))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data9, (TfLiteIntArray*)&tensor_dimension9, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant9))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data10, (TfLiteIntArray*)&tensor_dimension10, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant10))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data11, (TfLiteIntArray*)&tensor_dimension11, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant11))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data12, (TfLiteIntArray*)&tensor_dimension12, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant12))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data13, (TfLiteIntArray*)&tensor_dimension13, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant13))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data14, (TfLiteIntArray*)&tensor_dimension14, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant14))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data15, (TfLiteIntArray*)&tensor_dimension15, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant15))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data16, (TfLiteIntArray*)&tensor_dimension16, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant16))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data17, (TfLiteIntArray*)&tensor_dimension17, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant17))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data18, (TfLiteIntArray*)&tensor_dimension18, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant18))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data19, (TfLiteIntArray*)&tensor_dimension19, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant19))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data20, (TfLiteIntArray*)&tensor_dimension20, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant20))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data21, (TfLiteIntArray*)&tensor_dimension21, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant21))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data22, (TfLiteIntArray*)&tensor_dimension22, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant22))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data23, (TfLiteIntArray*)&tensor_dimension23, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant23))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data24, (TfLiteIntArray*)&tensor_dimension24, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant24))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data25, (TfLiteIntArray*)&tensor_dimension25, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant25))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 409600, (TfLiteIntArray*)&tensor_dimension26, 409600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant26))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension27, 409600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant27))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 409600, (TfLiteIntArray*)&tensor_dimension28, 204800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant28))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 1244208, (TfLiteIntArray*)&tensor_dimension29, 1228800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant29))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension30, 1244208, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant30))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 1244208, (TfLiteIntArray*)&tensor_dimension31, 307200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant31))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 614400, (TfLiteIntArray*)&tensor_dimension32, 51200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant32))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 307200, (TfLiteIntArray*)&tensor_dimension33, 307200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant33))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension34, 307200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant34))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 358400, (TfLiteIntArray*)&tensor_dimension35, 51200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant35))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 307200, (TfLiteIntArray*)&tensor_dimension36, 51200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant36))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension37, 307200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant37))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 307200, (TfLiteIntArray*)&tensor_dimension38, 204800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant38))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 12800, (TfLiteIntArray*)&tensor_dimension39, 12800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant39))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension40, 12800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant40))}, },
};const NodeInfo_t nodeData[] = {
  { (TfLiteIntArray*)&inputs0, (TfLiteIntArray*)&outputs0, const_cast<void*>(static_cast<const void*>(&opdata0)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs1, (TfLiteIntArray*)&outputs1, const_cast<void*>(static_cast<const void*>(&opdata1)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs2, (TfLiteIntArray*)&outputs2, const_cast<void*>(static_cast<const void*>(&opdata2)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, const_cast<void*>(static_cast<const void*>(&opdata3)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs4, (TfLiteIntArray*)&outputs4, nullptr, OP_PAD, },
  { (TfLiteIntArray*)&inputs5, (TfLiteIntArray*)&outputs5, const_cast<void*>(static_cast<const void*>(&opdata5)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs6, (TfLiteIntArray*)&outputs6, const_cast<void*>(static_cast<const void*>(&opdata6)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs7, (TfLiteIntArray*)&outputs7, const_cast<void*>(static_cast<const void*>(&opdata7)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs8, (TfLiteIntArray*)&outputs8, const_cast<void*>(static_cast<const void*>(&opdata8)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs9, (TfLiteIntArray*)&outputs9, const_cast<void*>(static_cast<const void*>(&opdata9)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs10, (TfLiteIntArray*)&outputs10, const_cast<void*>(static_cast<const void*>(&opdata10)), OP_ADD, },
  { (TfLiteIntArray*)&inputs11, (TfLiteIntArray*)&outputs11, const_cast<void*>(static_cast<const void*>(&opdata11)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs12, (TfLiteIntArray*)&outputs12, const_cast<void*>(static_cast<const void*>(&opdata12)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs13, (TfLiteIntArray*)&outputs13, const_cast<void*>(static_cast<const void*>(&opdata13)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs14, (TfLiteIntArray*)&outputs14, const_cast<void*>(static_cast<const void*>(&opdata14)), OP_SOFTMAX, },
};

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = 0;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  if (current_location - bytes < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}
typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;
static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  };
  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }
  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }

  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }
  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }
  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }
};

} // namespace

TfLiteStatus tflite_learn_5_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  ctx.impl_ = static_cast<void*>(&micro_context_);
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.tensors_size = 41;
  for (size_t i = 0; i < 41; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }
  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_DEPTHWISE_CONV_2D] = Register_DEPTHWISE_CONV_2D();
  registrations[OP_PAD] = Register_PAD();
  registrations[OP_ADD] = Register_ADD();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t i = 0; i < 15; ++i) {
    tflNodes[i].inputs = nodeData[i].inputs;
    tflNodes[i].outputs = nodeData[i].outputs;
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
tflNodes[i].custom_initial_data = nullptr;
      tflNodes[i].custom_initial_data_size = 0;
if (registrations[nodeData[i].used_op_index].init) {
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
    }
  }
  for (size_t i = 0; i < 15; ++i) {
    if (registrations[nodeData[i].used_op_index].prepare) {
      ResetTensors();

      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
      if (status != kTfLiteOk) {
        return status;
      }
    }
  }
  return kTfLiteOk;
}

static const int inTensorIndices[] = {
  0, 
};
TfLiteStatus tflite_learn_5_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(inTensorIndices[index], tensor);
  return kTfLiteOk;
}

static const int outTensorIndices[] = {
  40, 
};
TfLiteStatus tflite_learn_5_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(outTensorIndices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_invoke() {
  for (size_t i = 0; i < 15; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
